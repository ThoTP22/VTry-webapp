/**
 * @swagger
 * components:
 *   schemas:
 *     TryOnOneStopRequest:
 *       type: object
 *       required:
 *         - file
 *         - garment_image_url
 *       properties:
 *         file:
 *           type: string
 *           format: binary
 *           description: Model image file upload (·∫£nh ng∆∞·ªùi m·∫´u) - T·ªëi ƒëa 10MB
 *         garment_image_url:
 *           type: string
 *           format: uri
 *           description: URL c·ªßa ·∫£nh qu·∫ßn √°o c·∫ßn th·ª≠ (ph·∫£i publicly accessible)
 *           example: "https://example.com/garment.jpg"
 *         mode:
 *           type: string
 *           enum: [performance, balanced, quality]
 *           default: balanced
 *           description: |
 *             Ch·∫ø ƒë·ªô x·ª≠ l√Ω - ·∫£nh h∆∞·ªüng ƒë·∫øn t·ªëc ƒë·ªô vs ch·∫•t l∆∞·ª£ng:
 *             - performance: ~5 gi√¢y, ch·∫•t l∆∞·ª£ng th·∫•p
 *             - balanced: ~8 gi√¢y, c√¢n b·∫±ng t·ªëc ƒë·ªô v√† ch·∫•t l∆∞·ª£ng
 *             - quality: ~12-17 gi√¢y, ch·∫•t l∆∞·ª£ng cao nh·∫•t
 *         num_samples:
 *           type: integer
 *           minimum: 1
 *           maximum: 4
 *           default: 1
 *           description: S·ªë l∆∞·ª£ng ·∫£nh k·∫øt qu·∫£ ƒë∆∞·ª£c t·∫°o (tƒÉng t·ª∑ l·ªá c√≥ k·∫øt qu·∫£ t·ªët)
 *         output_format:
 *           type: string
 *           enum: [png, jpeg]
 *           default: jpeg
 *           description: |
 *             ƒê·ªãnh d·∫°ng ·∫£nh ƒë·∫ßu ra:
 *             - png: Ch·∫•t l∆∞·ª£ng cao nh·∫•t, k√≠ch th∆∞·ªõc l·ªõn
 *             - jpeg: Nhanh h∆°n, k√≠ch th∆∞·ªõc nh·ªè, ph√π h·ª£p real-time
 *         category:
 *           type: string
 *           enum: [auto, tops, bottoms, one-pieces]
 *           default: auto
 *           description: |
 *             Lo·∫°i qu·∫ßn √°o ƒë·ªÉ t·ª± ƒë·ªông detect:
 *             - auto: T·ª± ƒë·ªông ph√¢n lo·∫°i
 *             - tops: √Åo (ph·∫ßn tr√™n)
 *             - bottoms: Qu·∫ßn (ph·∫ßn d∆∞·ªõi)
 *             - one-pieces: V√°y/jumpsuit
 *         segmentation_free:
 *           type: boolean
 *           default: true
 *           description: |
 *             Fitting tr·ª±c ti·∫øp kh√¥ng c·∫ßn ph√¢n ƒëo·∫°n qu·∫ßn √°o.
 *             T·ªët cho qu·∫ßn √°o bulky, gi·ªØ ƒë∆∞·ª£c body shape v√† skin texture.
 *             Set false n·∫øu qu·∫ßn √°o g·ªëc kh√¥ng ƒë∆∞·ª£c remove ƒë√∫ng c√°ch.
 *         moderation_level:
 *           type: string
 *           enum: [conservative, permissive, none]
 *           default: permissive
 *           description: |
 *             M·ª©c ƒë·ªô ki·ªÉm duy·ªát n·ªôi dung:
 *             - conservative: Nghi√™m ng·∫∑t, block underwear/swimwear
 *             - permissive: Cho ph√©p swimwear, block explicit content
 *             - none: Kh√¥ng ki·ªÉm duy·ªát (c·∫ßn tu√¢n th·ªß ToS)
 *         garment_photo_type:
 *           type: string
 *           enum: [auto, flat-lay, model]
 *           default: auto
 *           description: |
 *             Lo·∫°i ·∫£nh qu·∫ßn √°o ƒë·ªÉ t·ªëi ∆∞u parameters:
 *             - auto: T·ª± ƒë·ªông detect
 *             - flat-lay: ·∫¢nh qu·∫ßn √°o ph·∫≥ng ho·∫∑c ghost mannequin
 *             - model: ·∫¢nh qu·∫ßn √°o tr√™n ng∆∞·ªùi m·∫´u
 *         seed:
 *           type: integer
 *           minimum: 0
 *           maximum: 4294967295
 *           description: Random seed ƒë·ªÉ c√≥ k·∫øt qu·∫£ t√°i t·∫°o ƒë∆∞·ª£c (c√πng input + seed = c√πng output)
 *
 *     TryOnOneStopResponse:
 *       type: object
 *       properties:
 *         ok:
 *           type: boolean
 *           description: Tr·∫°ng th√°i th√†nh c√¥ng
 *           example: true
 *         prediction_id:
 *           type: string
 *           description: FASHN AI prediction ID ƒë·ªÉ tracking
 *           example: "123a87r9-4129-4bb3-be18-9c9fb5bd7fc1-u1"
 *         images:
 *           type: array
 *           items:
 *             type: string
 *             format: uri
 *           description: |
 *             M·∫£ng c√°c S3 presigned URLs c·ªßa ·∫£nh k·∫øt qu·∫£.
 *             URLs c√≥ th·ªùi h·∫°n 1 gi·ªù.
 *           example:
 *             - "https://s3.amazonaws.com/bucket/tryon-outputs/pred123/output_0.jpg?signature=..."
 *         count:
 *           type: integer
 *           description: S·ªë l∆∞·ª£ng ·∫£nh ƒë∆∞·ª£c t·∫°o
 *           example: 1
 *
 *     TryOnErrorResponse:
 *       type: object
 *       properties:
 *         ok:
 *           type: boolean
 *           example: false
 *         message:
 *           type: string
 *           description: Th√¥ng b√°o l·ªói chi ti·∫øt
 *         error:
 *           type: object
 *           description: Chi ti·∫øt l·ªói t·ª´ FASHN API (n·∫øu c√≥)
 *           properties:
 *             name:
 *               type: string
 *               enum: [ImageLoadError, ContentModerationError, PoseError, PipelineError, ThirdPartyError]
 *             message:
 *               type: string
 *         status:
 *           type: integer
 *           description: HTTP status t·ª´ upstream service (n·∫øu c√≥)
 *         body:
 *           type: string
 *           description: Raw response body t·ª´ upstream (n·∫øu c√≥)
 */

/**
 * @swagger
 * /api/visual-tryon/tryon:
 *   post:
 *     tags:
 *       - Visual Try-On
 *     summary: Virtual try-on m·ªôt b∆∞·ªõc (One-Stop) - FASHN AI v1.6
 *     description: |
 *       Upload ·∫£nh ng∆∞·ªùi m·∫´u v√† URL ·∫£nh qu·∫ßn √°o ƒë·ªÉ t·∫°o virtual try-on s·ª≠ d·ª•ng FASHN AI v1.6.
 *       API n√†y x·ª≠ l√Ω to√†n b·ªô workflow t·ª´ upload, g·ªçi FASHN AI, ƒë·∫øn l∆∞u k·∫øt qu·∫£ l√™n S3.
 *
 *       **üîÑ Quy tr√¨nh x·ª≠ l√Ω:**
 *       1. Validate inputs v√† upload model image l√™n S3
 *       2. T·∫°o presigned URL cho FASHN AI ƒë·ªçc model image
 *       3. G·ªçi FASHN API `/v1/run` v·ªõi model `tryon-v1.6`
 *       4. Poll `/v1/status/{id}` ƒë·∫øn khi `completed` ho·∫∑c `failed`
 *       5. Download ·∫£nh k·∫øt qu·∫£ t·ª´ FASHN CDN v√† re-host l√™n S3
 *       6. Tr·∫£ v·ªÅ presigned URLs cho client (th·ªùi h·∫°n 1 gi·ªù)
 *
 *       **‚ö° Th·ªùi gian x·ª≠ l√Ω (depends on mode):**
 *       - Performance: ~5-15 gi√¢y
 *       - Balanced: ~8-30 gi√¢y (recommended)
 *       - Quality: ~12-60 gi√¢y
 *
 *       **üìã Requirements:**
 *       - Model image: File upload, max 10MB, formats: JPG/PNG/WebP
 *       - Garment image: Publicly accessible URL, preferably square aspect ratio
 *       - TRYON_API_KEY: Valid FASHN AI API key
 *       - AWS S3: Configured for image storage
 *
 *       **üîí Rate Limits:**
 *       - Processing: 6 concurrent requests max
 *       - FASHN API: 50 requests/60s for `/run`, 50 requests/10s for `/status`
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             $ref: '#/components/schemas/TryOnOneStopRequest'
 *           example:
 *             file: "[binary model image file]"
 *             garment_image_url: "https://example.com/dress.jpg"
 *             mode: "balanced"
 *             num_samples: 1
 *             output_format: "jpeg"
 *             category: "auto"
 *             segmentation_free: true
 *     responses:
 *       200:
 *         description: ‚úÖ Try-on ho√†n th√†nh th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/TryOnOneStopResponse'
 *             example:
 *               ok: true
 *               prediction_id: "123a87r9-4129-4bb3-be18-9c9fb5bd7fc1-u1"
 *               images:
 *                 - "https://s3.amazonaws.com/bucket/tryon-outputs/123a87r9/output_0.jpg?AWSAccessKeyId=..."
 *               count: 1
 *       400:
 *         description: ‚ùå L·ªói ƒë·∫ßu v√†o - validation failed
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/TryOnErrorResponse'
 *             examples:
 *               missing_file:
 *                 summary: Thi·∫øu file upload
 *                 value:
 *                   ok: false
 *                   message: "C·∫ßn c√≥ file (model image) v√† garment_image_url"
 *               invalid_url:
 *                 summary: URL qu·∫ßn √°o kh√¥ng h·ª£p l·ªá
 *                 value:
 *                   ok: false
 *                   message: "garment_image_url kh√¥ng h·ª£p l·ªá"
 *               file_too_large:
 *                 summary: File qu√° l·ªõn
 *                 value:
 *                   ok: false
 *                   message: "File ·∫£nh qu√° l·ªõn. K√≠ch th∆∞·ªõc t·ªëi ƒëa l√† 10MB"
 *               invalid_file_type:
 *                 summary: Kh√¥ng ph·∫£i file ·∫£nh
 *                 value:
 *                   ok: false
 *                   message: "Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh"
 *               invalid_parameters:
 *                 summary: Parameters kh√¥ng h·ª£p l·ªá
 *                 value:
 *                   ok: false
 *                   message: "num_samples ph·∫£i t·ª´ 1 ƒë·∫øn 4"
 *       422:
 *         description: ‚ùå FASHN API processing error
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/TryOnErrorResponse'
 *             examples:
 *               image_load_error:
 *                 summary: Kh√¥ng th·ªÉ load ·∫£nh
 *                 value:
 *                   ok: false
 *                   message: "Tryon API failed (sync error)"
 *                   error:
 *                     name: "ImageLoadError"
 *                     message: "Error loading model image: The URL's Content-Type is not an image"
 *               content_moderation_error:
 *                 summary: N·ªôi dung b·ªã ki·ªÉm duy·ªát
 *                 value:
 *                   ok: false
 *                   message: "Tryon API failed (sync error)"
 *                   error:
 *                     name: "ContentModerationError"
 *                     message: "Prohibited content detected in garment image"
 *               pose_error:
 *                 summary: Kh√¥ng detect ƒë∆∞·ª£c pose
 *                 value:
 *                   ok: false
 *                   message: "Tryon API failed (sync error)"
 *                   error:
 *                     name: "PoseError"
 *                     message: "Unable to detect body pose in model image"
 *       500:
 *         description: ‚ùå L·ªói server n·ªôi b·ªô
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/TryOnErrorResponse'
 *             examples:
 *               timeout:
 *                 summary: Timeout x·ª≠ l√Ω
 *                 value:
 *                   ok: false
 *                   message: "Timeout: Try-on still processing after MAX_WAIT_MS"
 *               config_error:
 *                 summary: Server configuration error
 *                 value:
 *                   ok: false
 *                   message: "Server configuration error: TRYON_API_KEY not configured"
 *               s3_error:
 *                 summary: L·ªói S3 upload/download
 *                 value:
 *                   ok: false
 *                   message: "S3 upload failed"
 *               download_error:
 *                 summary: L·ªói download k·∫øt qu·∫£
 *                 value:
 *                   ok: false
 *                   message: "Download output failed 404: Not Found"
 *       502:
 *         description: ‚ùå L·ªói FASHN API upstream
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/TryOnErrorResponse'
 *             examples:
 *               fashn_api_error:
 *                 summary: FASHN API kh√¥ng available
 *                 value:
 *                   ok: false
 *                   message: "FASHN /v1/run HTTP error"
 *                   status: 502
 *                   body: "Service temporarily unavailable"
 *               status_api_error:
 *                 summary: FASHN status API error
 *                 value:
 *                   ok: false
 *                   message: "FASHN /status HTTP 404: 404 Not Found"
 *
 * /api/visual-tryon/analysis:
 *   post:
 *     tags:
 *       - Visual Try-On
 *     summary: üö® Legacy endpoint (Deprecated)
 *     description: |
 *       **‚ö†Ô∏è DEPRECATED:** Endpoint n√†y ƒë∆∞·ª£c gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c.
 *       **üëâ Vui l√≤ng s·ª≠ d·ª•ng `/api/visual-tryon/tryon` thay th·∫ø.**
 *
 *       Ho·∫°t ƒë·ªông gi·ªëng h·ªát nh∆∞ `/api/visual-tryon/tryon` nh∆∞ng s·∫Ω b·ªã remove trong t∆∞∆°ng lai.
 *
 *       **üìÖ Deprecation Timeline:**
 *       - Hi·ªán t·∫°i: V·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
 *       - Q4 2025: S·∫Ω c√≥ warning trong response
 *       - Q1 2026: C√≥ th·ªÉ b·ªã remove
 *     deprecated: true
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             $ref: '#/components/schemas/TryOnOneStopRequest'
 *     responses:
 *       200:
 *         description: Try-on th√†nh c√¥ng (gi·ªëng nh∆∞ /tryon)
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/TryOnOneStopResponse'
 *       400:
 *         $ref: '#/paths/~1api~1visual-tryon~1tryon/post/responses/400'
 *       422:
 *         $ref: '#/paths/~1api~1visual-tryon~1tryon/post/responses/422'
 *       500:
 *         $ref: '#/paths/~1api~1visual-tryon~1tryon/post/responses/500'
 *       502:
 *         $ref: '#/paths/~1api~1visual-tryon~1tryon/post/responses/502'
 */

/**
 * @swagger
 * tags:
 *   - name: Visual Try-On
 *     description: |
 *       ## üéØ FASHN AI Virtual Try-On Integration
 *
 *       Comprehensive virtual try-on solution s·ª≠ d·ª•ng FASHN AI v1.6 model.
 *
 *       ### üìö Quick Start Guide
 *
 *       1. **Prepare Images:**
 *          - Model image: Upload file (max 10MB, JPG/PNG/WebP)
 *          - Garment image: Public URL, preferably square ratio
 *
 *       2. **Choose Parameters:**
 *          - `mode`: `balanced` (recommended) cho most use cases
 *          - `output_format`: `jpeg` cho web, `png` cho highest quality
 *          - `num_samples`: `1-4` ƒë·ªÉ tƒÉng chance c√≥ good result
 *
 *       3. **Make Request:**
 *          ```bash
 *          curl -X POST "/api/visual-tryon/tryon" \
 *            -F "file=@model.jpg" \
 *            -F "garment_image_url=https://example.com/dress.jpg" \
 *            -F "mode=balanced"
 *          ```
 *
 *       4. **Handle Response:**
 *          - Success: `ok: true` + array of image URLs
 *          - Error: `ok: false` + detailed error message
 *
 *       ### ‚ö° Performance Expectations
 *
 *       | Mode | Time | Quality | Best For |
 *       |------|------|---------|----------|
 *       | performance | ~5-15s | Basic | Quick previews, mobile apps |
 *       | balanced | ~8-30s | Good | Most web applications |
 *       | quality | ~12-60s | Excellent | High-end fashion, marketing |
 *
 *       ### üö® Common Issues & Solutions
 *
 *       | Error | Cause | Solution |
 *       |-------|-------|----------|
 *       | `ImageLoadError` | URL kh√¥ng accessible | Ensure public URL, check CORS |
 *       | `ContentModerationError` | Restricted content | Adjust `moderation_level` |
 *       | `PoseError` | Kh√¥ng detect body | Use clear, full-body model photos |
 *       | `404` on status | Invalid prediction ID | Check `/v1/run` response |
 *       | `Timeout` | Processing qu√° l√¢u | Try `performance` mode |
 *
 *       ### üîß Environment Setup
 *
 *       Required environment variables:
 *       ```env
 *       TRYON_API_KEY=your_fashn_api_key
 *       AWS_REGION=your_aws_region
 *       AWS_ACCESS_KEY_ID=your_access_key
 *       AWS_SECRET_ACCESS_KEY=your_secret_key
 *       AWS_S3_BUCKET_NAME=your_bucket_name
 *       ```
 *
 *       ### üìû Support & Testing
 *
 *       - **Test endpoints**: `/api/test/visual-tryon-test`, `/api/test/fashn-status-test`
 *       - **Rate limits**: 6 concurrent, 50 req/min for run, 50 req/10s for status
 *       - **Image retention**: S3 URLs valid for 1 hour
 *       - **FASHN CDN**: Original URLs valid for 72 hours
 *
 *       ### üîó Related Resources
 *
 *       - [FASHN AI Documentation](https://docs.fashn.ai/api-reference/tryon-v1-6)
 *       - [Image Best Practices](https://docs.fashn.ai/guides/image-preprocessing-best-practices)
 *       - [Try-on Parameters Guide](https://docs.fashn.ai/guides/tryon-parameters-guide)
 */
